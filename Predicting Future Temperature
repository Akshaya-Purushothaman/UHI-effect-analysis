import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import os

files = [
    'Adyar.csv', 'AnnaNagar.csv', 'Tondiarpet.csv', 'Royapuram.csv', 'Kodambakkam.csv','Alandur.csv',
    'Perungudi.csv', 'valasaravakkam.csv', 'Manali.csv', 'Teynampet.csv',
    'Sholinganallur.csv', 'ThiruViKaNagar.csv', 'Ambattur.csv', 'madhavaram.csv'
]

time_step = 30

def create_dataset(data, time_step=1):
    X, y = [], []
    for i in range(len(data) - time_step):
        X.append(data[i:(i + time_step), 0])
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

for file_path in files:
    print(f"Processing {file_path}")
    data = pd.read_csv(file_path)
    temperatures = data['temp'].values

    if len(temperatures) == 0:
        print(f"Temperature data is empty for {file_path}. Skipping this file.")
        continue

    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(temperatures.reshape(-1, 1))

    train_size = len(scaled_data) - time_step

    train_data = scaled_data[:train_size]
    test_data = scaled_data[train_size - time_step:]

    X_train, y_train = create_dataset(train_data, time_step)
    X_test, y_test = create_dataset(test_data, time_step)

    X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
    X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(X_train, y_train, epochs=20, batch_size=1, verbose=1)
    predictions = model.predict(X_test)
    predictions = scaler.inverse_transform(predictions)
    y_test = scaler.inverse_transform(y_test.reshape(-1, 1))

    mse = mean_squared_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)

    print(f'{file_path} - Mean Squared Error (MSE): {mse}')
    print(f'{file_path} - R-squared (R^2): {r2}')

    print(f"{file_path} - Predicted Temperatures:")
    for i, pred in enumerate(predictions):
        print(f"Day {i + 1}: {pred[0]:.2f}°F")

    output_file = f"tempdata_{os.path.splitext(file_path)[0]}.csv"
    if len(predictions) >= time_step:
        last_predicted_temp = predictions[-1][0]  # Get the 30th value
        df_predictions = pd.DataFrame({
            'Day': [time_step],  # Save only the last day
            'Predicted Temperature (°F)': [last_predicted_temp]
        })
        df_predictions.to_csv(output_file, index=False)
        print(f"Saved 30th prediction to {output_file}")
    else:
        print(f"Not enough data to save the 30th predicted temperature for {file_path}")

    plt.figure(figsize=(12, 6))
    plt.plot(range(len(temperatures)), temperatures, label='Historical Data')
    plt.plot(range(len(temperatures) - len(predictions), len(temperatures)), predictions, label='Predicted Values', linestyle='--')
    plt.title(f'Temperature Prediction for {file_path}')
    plt.xlabel('Time')
    plt.ylabel('Temperature (°F)')
    plt.legend()
    plt.show()
